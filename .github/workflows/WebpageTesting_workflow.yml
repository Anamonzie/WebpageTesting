# This workflow will build a .NET project
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-net

name: WebpageTesting

env:  # Define environment variables here
  ALLURE_RESULTS_DIR: ${{ github.workspace }}/EpamWebProject/EpamWebTests/allure-results
  ALLURE_CONFIG: ${{ github.workspace }}/EpamWebProject/EpamWebTests/allureConfig.json
  SOLUTION_FILE: ${{ github.workspace }}/EpamWebProject/EpamWebTests/EpamWebTests.sln
  
on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]
  workflow_dispatch:
    inputs:
      category:
        description: 'Test category to run'
        required: false
        default: 'all'
        
jobs:
  build:
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v4
    
    - name: Print a secret
      run: echo "My secret value is ${{ secrets.SECRET_EXAMPLE }}"
    
    - name: Setup .NET    
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: 8.0.x
        
    - name: Install Playwright
      run: npm install @playwright/test

    - name: Install Playwright Dependencies
      run: npx playwright install-deps
      
    - name: Restore Packages
      run: dotnet restore ${{ env.SOLUTION_FILE }}

    - name: Install Playwright Browsers
      run: npx playwright install
      
    - name: Create Allure Results Directory
      run: mkdir -p allure-results allure-history
      
    - name: Build the project
      run: dotnet build --no-restore --configuration Release ${{ env.SOLUTION_FILE }}
    
    - name: Run Playwright Tests
      run: |
        if [ "${{ github.event.inputs.category }}" == "all" ] || [ -z "${{ github.event.inputs.category }}" ]; then
          dotnet test --no-build --configuration Release EpamWebProject/EpamWebTests/EpamWebTests.csproj 
        else
          dotnet test --no-build --configuration Release --filter "Category=${{ github.event.inputs.category }}" EpamWebProject/EpamWebTests/EpamWebTests.csproj 
        fi
        
    # Flatten allure results
    - name: Flatten allure results
      run: |
        mkdir -p ./allure-results
        find ./allure-results -mindepth 2 -type f -exec mv -t ./allure-results {} +
        find ./allure-results -type d -empty -delete    
        
    - name: Load test report history
      uses: actions/checkout@v4
      if: always()
      continue-on-error: true
      with:
        ref: gh-pages
        path: gh-pages

    # Remove `.git` from allure-history to avoid permission issues
    - name: Remove .git from Allure History
      run: |
        if [ -d "gh-pages/.git" ]; then
          rm -rf gh-pages/.git
        fi
        
    # Publish Allure Report
    - name: Build and Publish Allure Report
      uses: simple-elf/allure-report-action@master
      if: always()
      with:
        allure_results: allure-results
        allure_history: allure-history

    # Publish test report to GitHub Pages
    - name: Publish Allure Test Report
      if: always()
      uses: peaceiris/actions-gh-pages@v4
      with:
        github_token: ${{ secrets.GITHUB_TOKEN }}
        publish_branch: gh-pages
        publish_dir: allure-history

    # Upload Allure Results for Debugging
    - name: Upload Allure Results for Debugging
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: allure-results
        path: allure-results
        
    # Upload Allure History for Debugging
    - name: Upload Allure History for Debugging
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: allure-history
        path: allure-history
